mod Main

type State = { x: Int, p : Player, things : Array Thing, score : Int, assets: Array Image }
type Input = { left: Bool, right: Bool, up: Bool, down: Bool }

def spy : a -> a := foreign -[[
    function(x)
        print(x)
        return x
    end
]]-

def init : Int -> State : _ =
  { x: 2
  , p: Player.new
  , score: 0
  , things: []
  , assets: Asset.load_assets Unit.unit
  }

def spawn_rate ::= 0.01


def update : Real -> Input -> State -> State : dt input { p, x, score, assets, things } =
  { p: Player.update dt input p
  , x
  , things: things
              # Array.filter_map (Thing.update dt p things)
              # Bool.iff
                (Math.random Unit.unit < spawn_rate)
                (Array.append $ Thing.spawn_box Unit.unit)
                (\x -> x)
              # Bool.iff
                (Math.random Unit.unit < spawn_rate)
                (Array.append $ Thing.spawn_shoe Unit.unit)
                (\x -> x)
  , score: score + 1
  , assets
  }


def draw
: State -> Render
: { p: p@{ p: xx }, score, assets, things } =
  let pp = { x: 100.0, y: 200.0 }
  let r = 100.0
  in
  Render.empty
   *> Render.color Render.white
   *> Render.image { x: 0.0, y: 0.0, r: 0.0, s: 10.0 } (Array.index_unsafe assets Asset.tile)
   *> Player.render p
   *> Render.printf ("Score: " ++ Int.to_string score) 0.0 0.0 300.0
   *> Render.all (Thing.draw assets) things
