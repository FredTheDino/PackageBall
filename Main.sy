mod Main

type State = { x: Int , p : Vec}
type Input = { left: Bool, right: Bool, up: Bool, down: Bool }

def spy : a -> a := foreign -[[
    function(x)
        print(x)
        return x
    end
]]-

def init : Int -> State : _ = { x: 2, p: { x:0, y:0 } }

def update : Real -> Input -> State -> State : dt input state@{ x, p } =
  match input
  with { left: true } -> { x: x + 1 | state }
  with { right: true } -> { p: Vec.add p (Vec.vec 1.0 0.0) | state }
  with _ -> { x: x + 0 | state }
  end

def draw
: State -> Render Unit
: { p } = Render.circle p 100.0
