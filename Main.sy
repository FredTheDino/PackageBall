mod Main

type State = { x: Int , p : Player, balls : Array Ball, score : Int }
type Input = { left: Bool, right: Bool, up: Bool, down: Bool }

def spy : a -> a := foreign -[[
    function(x)
        print(x)
        return x
    end
]]-

def init : Int -> State : _ = { x: 2, p: Player.new, balls: [] , score: 0 }

def update : Real -> Input -> State -> State : dt input { p, x, balls, score } =
  let newBall = Spawner.outsideScreen Unit.unit 
  in
  { p: Player.update dt input p
  , x
  , balls: balls # Array.map (Ball.update dt) # Array.append newBall
  , score: score + 1 }

def draw
: State -> Render
: { p: p@{ p: xx }, balls, score } =
  let pp = { x: 100.0, y: 200.0 }
  let r = 100.0
  in
  Render.empty
   *> Render.color (Bool.iff (Circle.hit { p: xx, r: Player.radius } { p: pp, r }) Render.red Render.white)
   *> Player.render p
   *> Render.circle pp r
   *> Render.printf ("Score: " ++ Int.to_string score) 0.0 0.0 300.0
   *> Array.foldl (\{ pos } acc -> acc *> Render.circle pos 5.0) Render.empty balls
