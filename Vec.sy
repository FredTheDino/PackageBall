mod Vec

type Vec = { x : Real, y : Real }

def vec
: Real -> Real -> Vec
: x y = { x, y }

def add
: Vec -> Vec -> Vec
: { x: xa, y: ya } { x: xb, y: yb }
= { x: xa + xb, y: ya + yb }

def sub
: Vec -> Vec -> Vec
: { x: xa, y: ya } { x: xb, y: yb }
= { x: xa - xb, y: ya - yb }

def mul
: Real -> Vec -> Vec
: s { x, y }
= { x: s * x, y: s * y }

def dot
: Vec -> Vec -> Real
: { x: xa, y: ya } { x: xb, y: yb }
= (xa * xb) + (ya * yb)

def clamp
: Real -> Vec -> Vec
: x v
= let l = len v in 
  Bool.iff (l < x)
    (v)
    (Vec.mul (x / l) v)


def len_sq
: Vec -> Real
: a = dot a a

def len
: Vec -> Real
: v = v # len_sq # Math.sqrt

def normalize
: Vec -> Vec
: a
= let
    l = len a
  in
  Bool.iff (l == 0.0)
    (vec 0.0 0.0)
    (a # Vec.mul (1.0 / l))
