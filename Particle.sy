mod Particle

type ParticleSystem = foreign

def dog_particle_system : Image -> ParticleSystem : img =
    new_system img
        # set_lifetime 0.1 0.3
        # set_emission_rate 0.0
        # set_colors [ Render.white, Render.whitet ]
        # set_spread Math.tau
        # set_speed 500.0 700.0

def box_particle_system : Image -> ParticleSystem : img =
    new_system img
        # set_lifetime 0.1 0.2
        # set_emission_rate 0.0
        # set_colors [ Render.black, Render.whitet ]
        # set_spread Math.tau
        # set_speed 500.0 700.0

def score_particles : Image -> ParticleSystem : img =
  let s = `1000.0
  in
    new_system img
        # set_lifetime 1.0 2.0
        # set_emission_rate 0.0
        # set_colors [ Render.white, Render.whitet ]
        # set_spread Math.pi
        # set_speed 200.0 50.0
        # set_linear_acceleration (Vec.vec s 0.0) (Vec.vec s 0.0 )

def new_system : Image -> ParticleSystem := foreign -[[
    function(img)
        return love.graphics.newParticleSystem( img, 1000 )
    end
]]-

def set_lifetime : Real -> Real -> ParticleSystem -> ParticleSystem := foreign -[[
    function(lo) return function(hi) return function(ps)
        ps:setParticleLifetime(lo, hi)
        return ps
    end end end
]]-

def set_emission_rate : Real -> ParticleSystem -> ParticleSystem := foreign -[[
    function(r) return function(ps)
        ps:setEmissionRate(r)
        return ps
    end end
]]-

def set_colors : Array Color -> ParticleSystem -> ParticleSystem : colors ps = 
    set_colors_ (colors # Array.map Render.color_to_lua) ps

def set_colors_ : Array (Array Real) -> ParticleSystem -> ParticleSystem := foreign -[[
    function(colors) return function(ps)
        ps:setColors(unpack(colors))
        return ps
    end end
]]-

def set_linear_acceleration : Vec -> Vec -> ParticleSystem -> ParticleSystem := foreign -[[
    function(lo) return function(hi) return function(ps)
        ps:setLinearAcceleration(lo.x, lo.y, hi.x, hi.y)
        return ps
    end end end
]]-

def emit : Int -> ParticleSystem -> ParticleSystem := foreign -[[
    function(amount) return function(ps)
        ps:emit(amount)
        return ps
    end end
]]-

def update : Real -> ParticleSystem -> ParticleSystem := foreign -[[
    function(dt) return function(ps)
        ps:update(dt)
        return ps
    end end
]]-

def set_speed : Real -> Real -> ParticleSystem -> ParticleSystem := foreign -[[
    function(lo) return function(hi) return function(ps)
        ps:setSpeed(lo, hi)
        return ps
    end end end
]]-

def set_position : Vec -> ParticleSystem -> ParticleSystem := foreign -[[
    function(v) return function(ps) 
        ps:setPosition(v.x, v.y)
        return ps
    end end
]]-


def set_spread : Real -> ParticleSystem -> ParticleSystem := foreign -[[
    function(spread) return function(ps)
        ps:setSpread(spread)
        return ps
    end end
]]-

def set_rotation : Real -> ParticleSystem -> ParticleSystem := foreign -[[
    function(rot) return function(ps)
        ps:setRotation(rot)
        return ps
    end end
]]-
