mod Render

type Render = foreign

def empty : Render := foreign -[[ function() end ]]-

def and
: Render -> Render -> Render
:= foreign -[[
  function(f)
    return function(x)
      return function()
        f()
        x()
      end
    end
  end
]]-

def circle
: Vec -> Real -> Render
:= foreign -[[
  function(v) return function(r)
    return function()
      love.graphics.circle("fill", v.x, v.y, r)
    end
  end end
]]-

def printf_foreign ::= foreign -[[
    function(a, b, c, d)
        return function()
            love.graphics.printf(a, b, c, d)
        end
    end
]]-

def printf
: Str -> Real -> Real -> Real -> Render
:= Curry.fn4 printf_foreign

def printf_ : Str -> Vec -> Str -> { r: Real, s: Real } -> Render := foreign -[[
function(str) return function(p) return function(align) return function(x)
  return function()
    love.graphics.printf(str, p.x, p.y, 100, align, x.r, x.s)
  end
end end end end
]]-

type Color = { r: Real, g: Real, b: Real, a: Real }

def all : (a -> Render) -> Array a -> Render : f =
  Array.foldl (\a acc -> and acc (f a)) Render.empty 


def color : Color -> Render := foreign -[[
    function(c)
        return function()
          love.graphics.setColor(c.r, c.g, c.b, c.a)
        end
    end
]]-

def image
: { x: Real, y : Real, r: Real, s: Real} -> Image -> Render
:= foreign -[[
  function(c) return function(x)
    return function()
      love.graphics.draw(x, c.x, c.y, c.r, c.s, c.s, x:getWidth() / 2, x:getHeight() / 2)
    end
  end end
]]-

def white : Color := { r: 1.0, g: 1.0, b: 1.0, a: 1.0 }
def red : Color := { r: 1.0, g: 0.0, b: 0.0, a: 1.0 }
def green : Color := { r: 0.0, g: 1.0, b: 0.0, a: 1.0 }
def blue : Color := { r: 0.0, g: 0.0, b: 1.0, a: 1.0 }
def black : Color := { r: 0.0, g: 0.0, b: 0.0, a: 1.0 }

def width : Unit -> Real := foreign -[[ function(unit) return love.graphics.getWidth() end ]]-
def height : Unit -> Real := foreign -[[ function(unit) return love.graphics.getHeight() end ]]-
