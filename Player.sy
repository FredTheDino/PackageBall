mod Player

type Player = { p: Vec, v: Vec, cd: Real }

def rad : Real := 35.0

def pos : Player -> Vec : { p, v } = p

def vel : Player -> Vec : { p, v } = v

def new : Player := { p: { x: Render.width Unit.unit / 2.0, y: Render.height Unit.unit / 2.0 }, v: { x: 0.0, y: 0.0 }, cd: 0.0 }

def input_to_vec : Input -> Vec : { left, right, up, down } =
  Vec.add
    (Vec.vec (Bool.iff left 1.0 0.0) (Bool.iff up 1.0 0.0) # Vec.mul (`1.0))
    (Vec.vec (Bool.iff right 1.0 0.0) (Bool.iff down 1.0 0.0))

def update : Real -> Input -> Player -> Player : dt input { p, v, cd } = 
  { p: v
        # Vec.mul dt
        # Vec.add p
  , v: input_to_vec input
        # Vec.mul (dt * 2000.0)
        # Vec.add v
        # Vec.clamp 1000.0
        # Vec.mul (Math.pow 0.01 dt)
  , cd: Bool.iff (Main.get_hit input) (0.2) (Math.max 0.0 $ cd - dt)
  }
  # clamp_inside

def box_collide
: Array Thing -> Player -> Player
: things player =
  Array.foldl (\thing { p, v, cd } -> 
            match thing
            with Thing:Full { pos } if Circle.hit { p, r: Player.rad } { p: pos, r: Thing.rad thing } -> 
              { p, v: Vec.add v (let n = Vec.sub p pos in n), cd }
            with _ -> { p, v, cd }
            end
        ) player things

def margin ::= rad * 1.5

def clamp_inside
  : Player -> Player
  : { p: { x, y }, v: { x: vx, y: vy }, cd } = 
  let hix = (Render.width Unit.unit - margin)
  let hiy = (Render.height Unit.unit - margin)
  let lox = margin
  let loy = margin
  in
  { p: { x: Math.clamp lox hix x
       , y: Math.clamp loy hiy y }
  , v: { x: vx * Bool.to_real (((lox < x) && (vx < 0.0))
                               || ((0.0 < vx) && (x < hix)))
       , y: vy * Bool.to_real (((loy < y) && (vy < 0.0))
                               || ((0.0 < vy) && (y < hiy)))
       }
  , cd
  }

def render
: Array Image -> Player -> Render
: assets { p: { x, y }, v: { x: vx, y: vy}, cd } = 
  let img = Array.index_unsafe assets Asset.player
  let s = 2.0 * rad / Image.width img
  let r = (Math.atan vy vx) - (Math.pi / 2.0)
  in
  Render.color Render.white *> Render.image { x, y, r, s: s + (cd * cd) } img 

