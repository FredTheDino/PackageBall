mod Curry

def compose
: (a -> b) -> (b -> c) -> (a -> c)
: f g a = g (f a)

def compose_flip : (b -> c) -> (a -> b) -> (a -> c) : f g = compose g f

type F3 = foreign

def fn3 : F3 -> a -> b -> c -> d := foreign -[[
    function(f3)
        return function(a)
            return function(b)
                return function(c)
                    return f3(a, b, c)
                end
            end
        end
    end
]]-

type F4 = foreign

def fn4 : F4 -> a -> b -> c -> d -> e := foreign -[[
    function(f4)
        return function(a)
            return function(b)
                return function(c)
                    return function(d)
                        return f4(a, b, c, d)
                    end
                end
            end
        end
    end
]]-
